#+title: PyBLASTp
#+author: Huayu Wang

* Introduction
This is my implementation of the original, gapless BLASTp algorithm in Python! I wrote this for a class project in ~BME1205~ at ShanghaiTech University, 2023, and it was a lot of fun. I hope you enjoy it as much as I did!

* Usage
** Requirements
- Python 3.10.10
- ~argparse~
- ~multiprocessing~
- ~json~
- ~Bio~

** Running the program
*** Make BLAST database
#+begin_src bash
python mkdb -d "whipworm.faa"
#+end_src

For further command line options, use the ~-h~ flag.
#+begin_src

usage: mkdb.py [-h] [-k KMER] [-t THREADS] [-w WORKDIR] [-d DATABASE]

My implementation of BLASTp database constructor

options:
  -h, --help            show this help message and exit
  -k KMER, --kmer KMER  Kmer length
  -t THREADS, --threads THREADS
                        Number of threads
  -w WORKDIR, --workdir WORKDIR
                        Working directory
  -d DATABASE, --database DATABASE
                        Database file name
#+end_src

*** BLASTing
#+begin_src bash
python myblast -d "whipworm.faa" -q "query.fasta" -t 15
#+end_src

For further command line options, use the ~-h~ flag.
#+begin_src
usage: myblast.py [-h] [-k KMER] [-T THRESHOLD] [-E EXPECT] [-t THREADS]
                  [-w WORKDIR] [-d DATABASE] [-q QUERY] [-r RESULT] [-s SUBMAT]

My implementation of BLASTp

options:
  -h, --help            show this help message and exit
  -k KMER, --kmer KMER  Kmer length
  -T THRESHOLD, --threshold THRESHOLD
                        Threshold for kmer
  -E EXPECT, --expect EXPECT
                        Expectation value
  -t THREADS, --threads THREADS
                        Number of threads
  -w WORKDIR, --workdir WORKDIR
                        Working directory
  -d DATABASE, --database DATABASE
                        Database file name
  -q QUERY, --query QUERY
                        Query file name
  -r RESULT, --result RESULT
                        Result file name
  -s SUBMAT, --submat SUBMAT
                        Substitution matrix
#+end_src


* Performance
- initial commit: 1m23s
- reduce redundence: 1m20s

* Todo List
** DONE /Argparse (DONE)/
- utilize the package ~argparse~ to parse arguments from the command line

** TODO Parallelize the code
- utilize the package ~multiprocessing~
#+begin_src python
from multiprocessing import Pool

with Pool() as p:
    result = pool.map(func, iterable)
#+end_src
- ~pool.map()~
- but at what level?
- maybe use ~jit~ for faster interpretation?
- Optimize code performance: reduce redundent calls

** TODO Validity check
The test results aren't exactly the same with the output of the official BLASTp + tool. More investigation is necessary to determine the validity of the results.

** TODO Local alignment algorithm
Currently, the program only outputs the enties containing valid HSPs. The next step is to implement the local alignment algorithm to properly align the HSPs.

The Smith-Waterman algorithm is a good choice for this task.

** DONE /Result outputting (DONE)/
- output the results with entry, aligned sequence, alignment score (a percentile)
- format in json/csv

** TODO Documentation

* References
- [[https://github.com/JiaShun-Xiao/BLAST-bioinfor-tool][JiaShun-Xiao/BLAST-bioinfor-tool]]
- [[https://en.wikipedia.org/wiki/BLAST_(biotechnology)][BLAST(biotechnology) - Wikipedia]]
- Course slides for ~BME1205~ at ShanghaiTech University, 2023
